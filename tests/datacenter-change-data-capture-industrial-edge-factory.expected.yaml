---
# Source: globex/charts/cashback-db/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cashback-db
  labels:
    helm.sh/chart: cashback-db-0.1.0
    app.kubernetes.io/name: cashback-db
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cashback-db
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
---
# Source: globex/charts/elastic-connector/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: elastic-connector
  labels:
    helm.sh/chart: elastic-connector-0.1.0
    app.kubernetes.io/name: elastic-connector
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-connectors
---
# Source: globex/charts/kafdrop/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafdrop
  labels:
    helm.sh/chart: kafdrop-0.1.0
    app.kubernetes.io/name: kafdrop
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kafdrop
---
# Source: globex/charts/retail-db/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: retail-db
  labels:
    helm.sh/chart: retail-db-0.1.0
    app.kubernetes.io/name: retail-db
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-db
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
---
# Source: globex/charts/sales-streams/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sales-streams
  labels:
    helm.sh/chart: sales-streams-0.1.0
    app.kubernetes.io/name: sales-streams
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-connectors
---
# Source: globex/charts/cashback-db/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: cashback-db
  labels:
    helm.sh/chart: cashback-db-0.1.0
    app.kubernetes.io/name: cashback-db
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cashback-db
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
stringData:
  database-user: cashback
  database-password: cashback
  database-admin-password: password
  database-name: cashback
type: Opaque
---
# Source: globex/charts/elastic-connector/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: elastic-connector
  labels:
    helm.sh/chart: elastic-connector-0.1.0
    app.kubernetes.io/name: elastic-connector
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-connectors
type: "Opaque"
stringData:
  application.properties: |-
    camel.component.kafka.brokers=kafka-kafka-bootstrap:9092
    

    kafka.product.topic.name=retail.updates.public.product
    kafka.product.consumer.group=elastic-connector

    quarkus.elasticsearch.hosts=retail-es-http:9200
    quarkus.elasticsearch.username=cashback
    quarkus.elasticsearch.password=cashback
    quarkus.elasticsearch.protocol=http

    elasticsearch.index.name=products
---
# Source: globex/charts/elasticsearch/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: elastic-user-secret
  labels:
    helm.sh/chart: elasticsearch-0.1.0
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-connectors
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
type: "Opaque"
stringData:
  username: cashback
  password: cashback
  roles: superuser
---
# Source: globex/charts/kafdrop/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kafdrop
  labels:
    helm.sh/chart: kafdrop-0.1.0
    app.kubernetes.io/name: kafdrop
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kafdrop
type: "Opaque"
stringData:
  kafkaBootstrapServer: "kafka-kafka-bootstrap:9092"
  kafka.properties: |-
---
# Source: globex/charts/retail-db/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: retail-db
  labels:
    helm.sh/chart: retail-db-0.1.0
    app.kubernetes.io/name: retail-db
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-db
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
stringData:
  database-user: retail
  database-password: retail
  database-admin-password: password
  database-name: retail
type: Opaque
---
# Source: globex/charts/sales-streams/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: sales-streams
  labels:
    helm.sh/chart: sales-streams-0.1.0
    app.kubernetes.io/name: sales-streams
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-connectors
type: "Opaque"
stringData:
  application.properties: |-
    quarkus.kafka-streams.bootstrap-servers=kafka-kafka-bootstrap:9092
    

    quarkus.kafka-streams.topics=retail.updates.public.sale,retail.updates.public.line_item,retail.sale-aggregated

    quarkus.kafka-streams.application-id=retail

    quarkus.kafka-streams.commit.interval.ms=10000
    
    quarkus.kafka-streams.replication.factor=3

    topic.sale-change-event=retail.updates.public.sale
    topic.lineitem-change-event=retail.updates.public.line_item
    topic.aggregated-sale=retail.sale-aggregated
---
# Source: globex/charts/cashback-db/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: cashback-db
  labels:
    helm.sh/chart: cashback-db-0.1.0
    app.kubernetes.io/name: cashback-db
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cashback-db
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: globex/charts/retail-db/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: retail-db
  labels:
    helm.sh/chart: retail-db-0.1.0
    app.kubernetes.io/name: retail-db
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-db
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: globex/charts/cashback-db/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: cashback-db-0.1.0
    app.kubernetes.io/name: cashback-db
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cashback-db
  name: cashback-db
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  type: ClusterIP
  ports:
    - name: postgres
      protocol: TCP
      port: 5432
      targetPort: postgres
  selector:
    app.kubernetes.io/name: cashback-db
    app.kubernetes.io/instance: datacenter-change-data-capture
---
# Source: globex/charts/kafdrop/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafdrop
  labels:
    helm.sh/chart: kafdrop-0.1.0
    app.kubernetes.io/name: kafdrop
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kafdrop
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: kafdrop
    app.kubernetes.io/instance: datacenter-change-data-capture
---
# Source: globex/charts/retail-db/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: retail-db-0.1.0
    app.kubernetes.io/name: retail-db
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-db
  name: retail-db
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  ports:
    - name: postgres
      protocol: TCP
      port: 5432
      targetPort: postgres
  selector:
    app.kubernetes.io/name: retail-db
    app.kubernetes.io/instance: datacenter-change-data-capture
---
# Source: globex/charts/sales-streams/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: sales-streams
  labels:
    helm.sh/chart: sales-streams-0.1.0
    app.kubernetes.io/name: sales-streams
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-connectors
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: sales-streams
    app.kubernetes.io/instance: datacenter-change-data-capture
---
# Source: globex/charts/cashback-db/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    helm.sh/chart: cashback-db-0.1.0
    app.kubernetes.io/name: cashback-db
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cashback-db
    app.openshift.io/runtime: postgresql    
  name: cashback-db
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: cashback-db
      app.kubernetes.io/instance: datacenter-change-data-capture
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: cashback-db
        app.kubernetes.io/instance: datacenter-change-data-capture
    spec:
      serviceAccountName: cashback-db
      securityContext:
        {}
      containers:
        - name: cashback-db
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          image: "quay.io/solution-pattern-cdc/cashback-db:8cdc534"
          imagePullPolicy: 
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  name: cashback-db
                  key: database-user
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cashback-db
                  key: database-password
            - name: POSTGRESQL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: cashback-db
                  key: database-admin-password
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: cashback-db
                  key: database-name
          livenessProbe:
            initialDelaySeconds: 5
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            {}
          volumeMounts:
            - name: "cashback-db-data"
              mountPath: "/var/lib/pgsql/data"
              volumes:
      volumes:
        - name: "cashback-db-data"
          persistentVolumeClaim:
            claimName: cashback-db
---
# Source: globex/charts/elastic-connector/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    helm.sh/chart: elastic-connector-0.1.0
    app.kubernetes.io/name: elastic-connector
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-connectors
    app.openshift.io/runtime: camel    
  name: elastic-connector
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: elastic-connector
      app.kubernetes.io/instance: datacenter-change-data-capture
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: elastic-connector
        app.kubernetes.io/instance: datacenter-change-data-capture
    spec:
      serviceAccountName: elastic-connector
      securityContext:
        {}
      containers:
        - name: elastic-connector
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          image: "quay.io/solution-pattern-cdc/elasticsearch-connector:718f693"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            {}
          livenessProbe:
            httpGet:
              path: /q/health/live
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              path: /q/health/ready
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
          volumeMounts:
            - mountPath: /deployments/config
              name: config
      volumes:
        - name: config
          secret:
            secretName: elastic-connector
---
# Source: globex/charts/kafdrop/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafdrop
  labels:
    helm.sh/chart: kafdrop-0.1.0
    app.kubernetes.io/name: kafdrop
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kafdrop
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kafdrop
      app.kubernetes.io/instance: datacenter-change-data-capture
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kafdrop
        app.kubernetes.io/instance: datacenter-change-data-capture
    spec:
      serviceAccountName: kafdrop
      serviceAccount: kafdrop
      securityContext:
        {}
      containers:
        - name: kafdrop
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          image: "obsidiandynamics/kafdrop:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: KAFKA_BROKERCONNECT
              valueFrom:
                secretKeyRef:
                  key: kafkaBootstrapServer
                  name: kafdrop
            - name: KAFKA_PROPERTIES
            - name: KAFKA_TRUSTSTORE
            - name: KAFKA_KEYSTORE
            - name: JVM_OPTS
            - name: JMX_PORT
              value: '8686'
            - name: HOST
            - name: SERVER_SERVLET_CONTEXTPATH
              value: /
            - name: KAFKA_PROPERTIES_FILE
              value: /config/kafka.properties
            - name: KAFKA_TRUSTSTORE_FILE
            - name: KAFKA_KEYSTORE_FILE
            - name: SERVER_PORT
              value: '9000'
            - name: CMD_ARGS
            - name: SCHEMAREGISTRY_CONNECT
            - name: SCHEMAREGISTRY_AUTH            
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health
              port: http
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health
              port: http
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            {}
          volumeMounts:
            - name: kafka-properties
              mountPath: /config
      volumes:
        - name: kafka-properties
          secret:
            secretName: kafdrop
            defaultMode: 420
---
# Source: globex/charts/retail-db/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    helm.sh/chart: retail-db-0.1.0
    app.kubernetes.io/name: retail-db
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-db
    app.openshift.io/runtime: postgresql    
  name: retail-db
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: retail-db
      app.kubernetes.io/instance: datacenter-change-data-capture
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: retail-db
        app.kubernetes.io/instance: datacenter-change-data-capture
    spec:
      serviceAccountName: retail-db
      securityContext:
        {}
      containers:
        - name: retail-db
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          image: "quay.io/solution-pattern-cdc/retail-db:6845136"
          imagePullPolicy: IfNotPresent
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  name: retail-db
                  key: database-user
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: retail-db
                  key: database-password
            - name: POSTGRESQL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: retail-db
                  key: database-admin-password
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: retail-db
                  key: database-name
          volumeMounts:
            - name: "retail-db-data"
              mountPath: "/var/lib/pgsql/data"
              volumes:
          livenessProbe:
            initialDelaySeconds: 5
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            {}
      volumes:
        - name: "retail-db-data"
          persistentVolumeClaim:
            claimName: retail-db
---
# Source: globex/charts/sales-streams/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    helm.sh/chart: sales-streams-0.1.0
    app.kubernetes.io/name: sales-streams
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-connectors
    app.openshift.io/runtime: quarkus    
  name: sales-streams
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sales-streams
      app.kubernetes.io/instance: datacenter-change-data-capture
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: sales-streams
        app.kubernetes.io/instance: datacenter-change-data-capture
    spec:
      serviceAccountName: sales-streams
      securityContext:
        {}
      containers:
        - name: sales-streams
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          image: "quay.io/solution-pattern-cdc/sales-streams:facb2c4"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          resources:
            limits:
              cpu: 250m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 128Mi
          livenessProbe:
            httpGet:
              path: /q/health/live
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              path: /q/health/ready
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
          volumeMounts:
            - mountPath: /deployments/config
              name: config
      volumes:
        - name: config
          secret:
            secretName: sales-streams
---
# Source: globex/charts/elasticsearch/templates/config-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: es-config-job
  labels:
    helm.sh/chart: elasticsearch-0.1.0
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-connectors
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  parallelism: 1
  completions: 1
  template:
    metadata:
      name: es-config-job
    spec:
      restartPolicy: Never
      initContainers:
        - name: wait-for-elasticearch
          image: registry.redhat.io/rhel8/support-tools:8.5
          command:
            [
              "sh",
              "-c",
              "for i in $(seq 1 300); do nc -zvw1 retail-es-http 9200 && exit 0 || sleep 3; done; exit 1",
            ]
      containers:
        - name: es-config-job
          image: registry.redhat.io/rhel8/support-tools:8.5
          env:
            - name: ELASTICSEARCH_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: retail-es-elastic-user
                  key: elastic
          command:
            - /bin/sh
            - -c
            - |
              curl -v -u elastic:$ELASTICSEARCH_PASSWORD -X PUT http://retail-es-http:9200/products -H 'Content-Type: application/json' -d '
              {"mappings":{"properties":{"description":{"type":"text"},"name":{"type":"text"}}},"settings":{"index":{"number_of_replicas":0,"number_of_shards":1}}}
              '
---
# Source: globex/charts/elasticsearch/templates/elasticsearch.yaml
apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
metadata:
  name: retail
  labels:
    helm.sh/chart: elasticsearch-0.1.0
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-connectors
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  auth:
    fileRealm:
    - secretName: elastic-user-secret
  http:
    service:
      {}
    tls:
      certificate: {}
      selfSignedCertificate:
        disabled: true
  monitoring:
    logs: {}
    metrics: {}
  nodeSets:
    - config:
        node.store.allow_mmap: false
      count: 1
      name: default
      podTemplate:
        metadata:
          creationTimestamp: null
        spec:
          containers: null
  transport:
    service:
      metadata: {}
      spec: {}
    tls:
      certificate: {}
  updateStrategy:
    changeBudget: {}
  version: 7.17.2
---
# Source: globex/charts/kafka-connect/templates/kafka-connect-build-is.yaml
apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  name: kafka-connect-build
  labels:
    helm.sh/chart: kafka-connect-0.1.0
    app.kubernetes.io/name: kafka-connect
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-connectors
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
---
# Source: globex/charts/kafka-cluster/templates/kafka-cr.yaml
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: kafka
  labels:
    helm.sh/chart: kafka-cluster-0.1.0
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  kafka:
    replicas: 3
    version: 3.3.1
    listeners:
    - name: plain
      port: 9092
      type: internal
      tls: false
    - name: tls
      port: 9093
      type: internal
      tls: true
    config:
      auto.create.topics.enable: false
      offsets.topic.replication.factor: 3
      transaction.state.log.min.isr: 2
      transaction.state.log.replication.factor: 3
      default.replication.factor: 3
      min.insync.replicas: 2
      inter.broker.protocol.version: '3.3'
    storage:
      type: ephemeral 
  zookeeper:
    replicas: 3
    storage:
      type: ephemeral
  entityOperator:
    topicOperator: {}
    userOperator: {}
---
# Source: globex/charts/kafka-connect/templates/kafka-connect.yaml
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaConnect
metadata:
  name: kafka-connect
  annotations:
    strimzi.io/use-connector-resources: 'true'
    argocd.argoproj.io/sync-wave: "-1"
  labels:
    helm.sh/chart: kafka-connect-0.1.0
    app.kubernetes.io/name: kafka-connect
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-connectors
spec:
  version: 3.3.1
  replicas: 1
  bootstrapServers: kafka-kafka-bootstrap:9092
  config:
    group.id: kafka-connect
    offset.storage.topic: 'retail.kafka-connect-offsets'
    config.storage.topic: 'retail.kafka-connect-configs'
    status.storage.topic: 'retail.kafka-connect-status'
    key.converter: org.apache.kafka.connect.json.JsonConverter
    value.converter: org.apache.kafka.connect.json.JsonConverter
    key.converter.schemas.enable: false
    value.converter.schemas.enable: false
    config.storage.replication.factor: 3
    offset.storage.replication.factor: 3
    status.storage.replication.factor: 3
    topic.creation.enable: true
    default.replication.factor: 3
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 250Mi
  livenessProbe:
    initialDelaySeconds: 45
    timeoutSeconds: 5
  readinessProbe:
    initialDelaySeconds: 15
    timeoutSeconds: 5
  jvmOptions:
    gcLoggingEnabled: false
  build:
    output:
      type: imagestream
      image: kafka-connect-build:latest
    plugins:
      - artifacts:
        - sha512sum: 088a92a7456101d7f01e356250439728e2018355d11797f20b8520d58ba6ce4400f917263223386b031c000d21010e1387970707bd7e8f92a681ac3c88ccc38b
          type: tgz
          url: https://repo1.maven.org/maven2/io/debezium/debezium-connector-postgres/1.9.7.Final/debezium-connector-postgres-1.9.7.Final-plugin.tar.gz
        name: debezium-postgres-connector
---
# Source: globex/charts/kafka-topics/templates/kafka-topic.yaml
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: retail.updates.public.customer
  labels:
    strimzi.io/cluster: kafka
    helm.sh/chart: kafka-topics-0.1.0
    app.kubernetes.io/name: kafka-topics
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  partitions: 1
  replicas: 2
  config:
    retention.ms: -1
    segment.bytes: 1073741824
  topicName: retail.updates.public.customer
---
# Source: globex/charts/kafka-topics/templates/kafka-topic.yaml
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: retail.updates.public.product
  labels:
    strimzi.io/cluster: kafka
    helm.sh/chart: kafka-topics-0.1.0
    app.kubernetes.io/name: kafka-topics
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  partitions: 1
  replicas: 2
  config:
    retention.ms: -1
    segment.bytes: 1073741824
  topicName: retail.updates.public.product
---
# Source: globex/charts/kafka-topics/templates/kafka-topic.yaml
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: retail.updates.public.sale
  labels:
    strimzi.io/cluster: kafka
    helm.sh/chart: kafka-topics-0.1.0
    app.kubernetes.io/name: kafka-topics
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  partitions: 1
  replicas: 2
  config:
    retention.ms: -1
    segment.bytes: 1073741824
  topicName: retail.updates.public.sale
---
# Source: globex/charts/kafka-topics/templates/kafka-topic.yaml
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: retail.updates.public.line-item
  labels:
    strimzi.io/cluster: kafka
    helm.sh/chart: kafka-topics-0.1.0
    app.kubernetes.io/name: kafka-topics
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  partitions: 1
  replicas: 2
  config:
    retention.ms: -1
    segment.bytes: 1073741824
  topicName: retail.updates.public.line_item
---
# Source: globex/charts/kafka-topics/templates/kafka-topic.yaml
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: retail.expense-event
  labels:
    strimzi.io/cluster: kafka
    helm.sh/chart: kafka-topics-0.1.0
    app.kubernetes.io/name: kafka-topics
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  partitions: 1
  replicas: 2
  config:
    retention.ms: -1
    segment.bytes: 1073741824
  topicName: retail.expense-event
---
# Source: globex/charts/kafka-topics/templates/kafka-topic.yaml
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: retail.sale-aggregated
  labels:
    strimzi.io/cluster: kafka
    helm.sh/chart: kafka-topics-0.1.0
    app.kubernetes.io/name: kafka-topics
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  partitions: 1
  replicas: 2
  config:
    retention.ms: -1
    segment.bytes: 1073741824
  topicName: retail.sale-aggregated
---
# Source: globex/charts/kafdrop/templates/route.yaml
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: kafdrop
  labels:
    helm.sh/chart: kafdrop-0.1.0
    app.kubernetes.io/name: kafdrop
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kafdrop
spec:
  to:
    kind: Service
    name: kafdrop
    weight: 100
  port:
    targetPort: http
  wildcardPolicy: None
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
