---
# Source: globex/charts/kafdrop/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafdrop
  labels:
    helm.sh/chart: kafdrop-0.1.0
    app.kubernetes.io/name: kafdrop
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kafdrop
---
# Source: globex/charts/retail-db/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: retail-db
  labels:
    helm.sh/chart: retail-db-0.1.0
    app.kubernetes.io/name: retail-db
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-db
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
---
# Source: globex/charts/kafdrop/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: kafdrop
  labels:
    helm.sh/chart: kafdrop-0.1.0
    app.kubernetes.io/name: kafdrop
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kafdrop
type: "Opaque"
stringData:
  kafkaBootstrapServer: "kafka-kafka-bootstrap:9092"
  kafka.properties: |-
---
# Source: globex/charts/retail-db/templates/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: retail-db
  labels:
    helm.sh/chart: retail-db-0.1.0
    app.kubernetes.io/name: retail-db
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-db
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
stringData:
  database-user: retail
  database-password: retail
  database-admin-password: password
  database-name: retail
type: Opaque
---
# Source: globex/charts/retail-db/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: retail-db
  labels:
    helm.sh/chart: retail-db-0.1.0
    app.kubernetes.io/name: retail-db
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-db
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
# Source: globex/charts/kafdrop/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kafdrop
  labels:
    helm.sh/chart: kafdrop-0.1.0
    app.kubernetes.io/name: kafdrop
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kafdrop
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: kafdrop
    app.kubernetes.io/instance: datacenter-change-data-capture
---
# Source: globex/charts/retail-db/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: retail-db-0.1.0
    app.kubernetes.io/name: retail-db
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-db
  name: retail-db
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  ports:
    - name: postgres
      protocol: TCP
      port: 5432
      targetPort: postgres
  selector:
    app.kubernetes.io/name: retail-db
    app.kubernetes.io/instance: datacenter-change-data-capture
---
# Source: globex/charts/kafdrop/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafdrop
  labels:
    helm.sh/chart: kafdrop-0.1.0
    app.kubernetes.io/name: kafdrop
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kafdrop
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kafdrop
      app.kubernetes.io/instance: datacenter-change-data-capture
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kafdrop
        app.kubernetes.io/instance: datacenter-change-data-capture
    spec:
      serviceAccountName: kafdrop
      serviceAccount: kafdrop
      securityContext:
        {}
      containers:
        - name: kafdrop
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          image: "obsidiandynamics/kafdrop:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: KAFKA_BROKERCONNECT
              valueFrom:
                secretKeyRef:
                  key: kafkaBootstrapServer
                  name: kafdrop
            - name: KAFKA_PROPERTIES
            - name: KAFKA_TRUSTSTORE
            - name: KAFKA_KEYSTORE
            - name: JVM_OPTS
            - name: JMX_PORT
              value: '8686'
            - name: HOST
            - name: SERVER_SERVLET_CONTEXTPATH
              value: /
            - name: KAFKA_PROPERTIES_FILE
              value: /config/kafka.properties
            - name: KAFKA_TRUSTSTORE_FILE
            - name: KAFKA_KEYSTORE_FILE
            - name: SERVER_PORT
              value: '9000'
            - name: CMD_ARGS
            - name: SCHEMAREGISTRY_CONNECT
            - name: SCHEMAREGISTRY_AUTH            
          ports:
            - name: http
              containerPort: 9000
              protocol: TCP
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health
              port: http
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /actuator/health
              port: http
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            {}
          volumeMounts:
            - name: kafka-properties
              mountPath: /config
      volumes:
        - name: kafka-properties
          secret:
            secretName: kafdrop
            defaultMode: 420
---
# Source: globex/charts/retail-db/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    helm.sh/chart: retail-db-0.1.0
    app.kubernetes.io/name: retail-db
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: retail-db
    app.openshift.io/runtime: postgresql    
  name: retail-db
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: retail-db
      app.kubernetes.io/instance: datacenter-change-data-capture
  strategy:
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: retail-db
        app.kubernetes.io/instance: datacenter-change-data-capture
    spec:
      serviceAccountName: retail-db
      securityContext:
        {}
      containers:
        - name: retail-db
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          image: "quay.io/solution-pattern-cdc/retail-db:6845136"
          imagePullPolicy: IfNotPresent
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          env:
            - name: POSTGRESQL_USER
              valueFrom:
                secretKeyRef:
                  name: retail-db
                  key: database-user
            - name: POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: retail-db
                  key: database-password
            - name: POSTGRESQL_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: retail-db
                  key: database-admin-password
            - name: POSTGRESQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: retail-db
                  key: database-name
          volumeMounts:
            - name: "retail-db-data"
              mountPath: "/var/lib/pgsql/data"
              volumes:
          livenessProbe:
            initialDelaySeconds: 5
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            {}
      volumes:
        - name: "retail-db-data"
          persistentVolumeClaim:
            claimName: retail-db
---
# Source: globex/charts/kafka-cluster/templates/kafka-cr.yaml
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: kafka
  labels:
    helm.sh/chart: kafka-cluster-0.1.0
    app.kubernetes.io/name: kafka
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  kafka:
    replicas: 3
    version: 3.3.1
    listeners:
    - name: plain
      port: 9092
      type: internal
      tls: false
    - name: tls
      port: 9093
      type: internal
      tls: true
    config:
      auto.create.topics.enable: false
      offsets.topic.replication.factor: 3
      transaction.state.log.min.isr: 2
      transaction.state.log.replication.factor: 3
      default.replication.factor: 3
      min.insync.replicas: 2
      inter.broker.protocol.version: '3.3'
    storage:
      type: ephemeral 
  zookeeper:
    replicas: 3
    storage:
      type: ephemeral
  entityOperator:
    topicOperator: {}
    userOperator: {}
---
# Source: globex/charts/kafka-topics/templates/kafka-topic.yaml
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: retail.updates.public.customer
  labels:
    strimzi.io/cluster: kafka
    helm.sh/chart: kafka-topics-0.1.0
    app.kubernetes.io/name: kafka-topics
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  partitions: 1
  replicas: 2
  config:
    retention.ms: -1
    segment.bytes: 1073741824
  topicName: retail.updates.public.customer
---
# Source: globex/charts/kafka-topics/templates/kafka-topic.yaml
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: retail.updates.public.product
  labels:
    strimzi.io/cluster: kafka
    helm.sh/chart: kafka-topics-0.1.0
    app.kubernetes.io/name: kafka-topics
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  partitions: 1
  replicas: 2
  config:
    retention.ms: -1
    segment.bytes: 1073741824
  topicName: retail.updates.public.product
---
# Source: globex/charts/kafka-topics/templates/kafka-topic.yaml
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: retail.updates.public.sale
  labels:
    strimzi.io/cluster: kafka
    helm.sh/chart: kafka-topics-0.1.0
    app.kubernetes.io/name: kafka-topics
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  partitions: 1
  replicas: 2
  config:
    retention.ms: -1
    segment.bytes: 1073741824
  topicName: retail.updates.public.sale
---
# Source: globex/charts/kafka-topics/templates/kafka-topic.yaml
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: retail.updates.public.line-item
  labels:
    strimzi.io/cluster: kafka
    helm.sh/chart: kafka-topics-0.1.0
    app.kubernetes.io/name: kafka-topics
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  partitions: 1
  replicas: 2
  config:
    retention.ms: -1
    segment.bytes: 1073741824
  topicName: retail.updates.public.line_item
---
# Source: globex/charts/kafka-topics/templates/kafka-topic.yaml
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: retail.expense-event
  labels:
    strimzi.io/cluster: kafka
    helm.sh/chart: kafka-topics-0.1.0
    app.kubernetes.io/name: kafka-topics
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  partitions: 1
  replicas: 2
  config:
    retention.ms: -1
    segment.bytes: 1073741824
  topicName: retail.expense-event
---
# Source: globex/charts/kafka-topics/templates/kafka-topic.yaml
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaTopic
metadata:
  name: retail.sale-aggregated
  labels:
    strimzi.io/cluster: kafka
    helm.sh/chart: kafka-topics-0.1.0
    app.kubernetes.io/name: kafka-topics
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/sync-wave: "-2"
spec:
  partitions: 1
  replicas: 2
  config:
    retention.ms: -1
    segment.bytes: 1073741824
  topicName: retail.sale-aggregated
---
# Source: globex/charts/kafdrop/templates/route.yaml
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: kafdrop
  labels:
    helm.sh/chart: kafdrop-0.1.0
    app.kubernetes.io/name: kafdrop
    app.kubernetes.io/instance: datacenter-change-data-capture
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: kafdrop
spec:
  to:
    kind: Service
    name: kafdrop
    weight: 100
  port:
    targetPort: http
  wildcardPolicy: None
  tls:
    insecureEdgeTerminationPolicy: Redirect
    termination: edge
